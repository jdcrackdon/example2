
////////////////////////////////////////////////////////////////////////////////////////
////// Autogenerated - do not modify or be prepared
////////////////////////////////////

(function(global, $data, undefined) {

  
  

  function registerEdmTypes() {
  
    function Edm_Boolean() { };
    $data.Container.registerType('Edm.Boolean', Edm_Boolean);
    $data.Container.mapType(Edm_Boolean, $data.Boolean);
    
    function Edm_Binary() { };
    $data.Container.registerType('Edm.Binary', Edm_Binary);
    $data.Container.mapType(Edm_Binary, $data.Blob);
    
    function Edm_DateTime() { };
    $data.Container.registerType('Edm.DateTime', Edm_DateTime);
    $data.Container.mapType(Edm_DateTime, $data.Date);
    
    function Edm_DateTimeOffset() { };
    $data.Container.registerType('Edm.DateTimeOffset', Edm_DateTimeOffset);
    $data.Container.mapType(Edm_DateTimeOffset, $data.Integer);
    
    function Edm_Time() { };
    $data.Container.registerType('Edm.Time', Edm_Time);
    $data.Container.mapType(Edm_Time, $data.Integer);
    
    function Edm_Decimal() { };
    $data.Container.registerType('Edm.Decimal', Edm_Decimal);
    $data.Container.mapType(Edm_Decimal, $data.Number);
    
    function Edm_Single() { };
    $data.Container.registerType('Edm.Single', Edm_Single);
    $data.Container.mapType(Edm_Single, $data.Number);
    
    function Edm_Double() { };
    $data.Container.registerType('Edm.Double', Edm_Double);
    $data.Container.mapType(Edm_Double, $data.Number);
    
    function Edm_Guid() { };
    $data.Container.registerType('Edm.Guid', Edm_Guid);
    $data.Container.mapType(Edm_Guid, $data.String);
    
    function Edm_Int16() { };
    $data.Container.registerType('Edm.Int16', Edm_Int16);
    $data.Container.mapType(Edm_Int16, $data.Integer);
    
    function Edm_Int32() { };
    $data.Container.registerType('Edm.Int32', Edm_Int32);
    $data.Container.mapType(Edm_Int32, $data.Integer);
    
    function Edm_Int64() { };
    $data.Container.registerType('Edm.Int64', Edm_Int64);
    $data.Container.mapType(Edm_Int64, $data.Integer);
    
    function Edm_Byte() { };
    $data.Container.registerType('Edm.Byte', Edm_Byte);
    $data.Container.mapType(Edm_Byte, $data.Integer);
    
    function Edm_String() { };
    $data.Container.registerType('Edm.String', Edm_String);
    $data.Container.mapType(Edm_String, $data.String);
    
  };
  registerEdmTypes();
  $data.Entity.extend('LightSwitchApplication.FacebookUser', {
    'Id': { key:true,type:'GuidField',nullable:false,required:true },
    'Identification': { type:'string',nullable:false,required:true,maxLength:50 },
    'Token': { type:'string',nullable:false,required:true,maxLength:Number.POSITIVE_INFINITY },
    'FacebookId': { type:'string',nullable:false,required:true,maxLength:50 },
    'Permissions': { type:'string',nullable:false,required:true,maxLength:Number.POSITIVE_INFINITY },
    'Email': { type:'string',nullable:false,required:true,maxLength:500 },
    'Uid': { type:'string',maxLength:50 },
    'FanPages': { type:'Array',elementType:'LightSwitchApplication.FanPage',inverseProperty:'FacebookUser1' }
  });
  $data.Entity.extend('LightSwitchApplication.FanPage', {
    'Id': { key:true,type:'GuidField',nullable:false,required:true },
    'PageId': { type:'string',nullable:false,required:true,maxLength:50 },
    'Token': { type:'string',nullable:false,required:true,maxLength:Number.POSITIVE_INFINITY },
    'FanPageAdministratorId': { type:'GuidField' },
    'FacebookUser1': { type:'LightSwitchApplication.FacebookUser',inverseProperty:'FanPages' }
  });
  $data.EntityContext.extend('clicktoaction.clicktoactionData', {
    FacebookUsers: { type: $data.EntitySet, elementType: LightSwitchApplication.FacebookUser },
      FanPages: { type: $data.EntitySet, elementType: LightSwitchApplication.FanPage },
      Microsoft_LightSwitch_GetEntitySetCanInformation: function () { return this._generateServiceOperationQueryable('Microsoft_LightSwitch_GetEntitySetCanInformation', '', arguments, ['entitySetName']); },
      Microsoft_LightSwitch_CanExecuteOperation: function () { return this._generateServiceOperationQueryable('Microsoft_LightSwitch_CanExecuteOperation', '', arguments, ['operationName']); }
  });
  
clicktoaction.context = new clicktoaction.clicktoactionData( { name:'oData', oDataServiceHost: 'http://dev.idlinksolutions.com/clicktoaction/clicktoactionData.svc' });

      
  })(window, $data);
      
    